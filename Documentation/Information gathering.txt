If move:
	- Search for move user
	- If user is foe
		- If move not in known moves, add it
			- If the known moves list is 4 items long, empty the potential moves list
			- Re-calculate checks and counters
	- Record all moves used in order
Elif switch:
	- If enemy, add them to list of seen pokemon
		- Re-calculate checks
			- If all 4 enemy pkmn have been seen, calculate based on just these 4
Elif buff/debuff:
	- Record
Elif status:
	- Record
Elif field change
	- Record

====
Interpret info
====
Look through move list
	- If count of unique priorities is less than the count of moves:
		- For each combination of two moves/pkmn within a priority bracket
			- Let pkmn A be the faster of the two
			- Calculate the ratio of speed scalars
			- If pkmn A has not been recorded to be faster than B before, record this
			- Otherwise, see if pkmn A has been recorded to be faster on a higher
			ratio. If so, update this info with the new ratio.

Look through all pokemon that have speed relationships
	- Compare each combination for 2 pkmn that are not both on the ai's team
		- If it does not have a speed relationship for each opposing pkmn and ally pkmn	(
		if it's not the ai's pkmn), look through each relationship to see if more speed
		relationships can be inferred.
			- E.g. if pkmn A is faster than pkmn B at ratio 1, see what pkmn B is 
			faster than. If it is faster than some pkmn C at a ratio of 1 or lower,
			then pkmn A must also be faster than pkmn C.
			- Conduct these checks wherever a pkmn C does not already have a speed
			relationship with pkmn A.

Update speed scalars based on buffs/debuffs/status/field changes